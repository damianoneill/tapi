// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Root root
// swagger:model root
type Root struct {

	// ietf restconf restconf
	IetfRestconfRestconf *RootIetfRestconfRestconf `json:"ietf-restconf:restconf,omitempty"`
}

// Validate validates this root
func (m *Root) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIetfRestconfRestconf(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Root) validateIetfRestconfRestconf(formats strfmt.Registry) error {

	if swag.IsZero(m.IetfRestconfRestconf) { // not required
		return nil
	}

	if m.IetfRestconfRestconf != nil {
		if err := m.IetfRestconfRestconf.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ietf-restconf:restconf")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Root) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Root) UnmarshalBinary(b []byte) error {
	var res Root
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// RootIetfRestconfRestconf This is the RESTCONF root resource for the RESTCONF datastore and operation resources. See RESTCONF RFC 8040 for further information.
// swagger:model RootIetfRestconfRestconf
type RootIetfRestconfRestconf struct {

	// data
	Data interface{} `json:"data,omitempty"`

	// operations
	Operations interface{} `json:"operations,omitempty"`

	// yang library version
	YangLibraryVersion string `json:"yang-library-version,omitempty"`
}

// Validate validates this root ietf restconf restconf
func (m *RootIetfRestconfRestconf) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RootIetfRestconfRestconf) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RootIetfRestconfRestconf) UnmarshalBinary(b []byte) error {
	var res RootIetfRestconfRestconf
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
