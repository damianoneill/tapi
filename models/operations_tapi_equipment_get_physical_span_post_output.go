// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// OperationsTapiEquipmentGetPhysicalSpanPostOutput operations tapi equipment get physical span post output
// swagger:model operations_tapi-equipment_get-physical-span-post-output
type OperationsTapiEquipmentGetPhysicalSpanPostOutput struct {

	// tapi equipment physical span
	TapiEquipmentPhysicalSpan *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpan `json:"tapi-equipment:physical-span,omitempty"`
}

// Validate validates this operations tapi equipment get physical span post output
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTapiEquipmentPhysicalSpan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutput) validateTapiEquipmentPhysicalSpan(formats strfmt.Registry) error {

	if swag.IsZero(m.TapiEquipmentPhysicalSpan) { // not required
		return nil
	}

	if m.TapiEquipmentPhysicalSpan != nil {
		if err := m.TapiEquipmentPhysicalSpan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tapi-equipment:physical-span")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutput) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetPhysicalSpanPostOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpan none (non-presence)
// swagger:model OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpan
type OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpan struct {

	// Both the serial segments that form an end-end strand and the parallel end-end strands. (list)
	AbstractStrand []*OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0 `json:"abstract-strand"`

	// none (list)
	AccessPort []*OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAccessPortItems0 `json:"access-port"`

	// List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity. (list)
	Name []*OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanNameItems0 `json:"name"`

	// UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity.
	// UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters.
	// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
	// Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6 (leaf)
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this operations tapi equipment get physical span post output tapi equipment physical span
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbstractStrand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccessPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpan) validateAbstractStrand(formats strfmt.Registry) error {

	if swag.IsZero(m.AbstractStrand) { // not required
		return nil
	}

	for i := 0; i < len(m.AbstractStrand); i++ {
		if swag.IsZero(m.AbstractStrand[i]) { // not required
			continue
		}

		if m.AbstractStrand[i] != nil {
			if err := m.AbstractStrand[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tapi-equipment:physical-span" + "." + "abstract-strand" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpan) validateAccessPort(formats strfmt.Registry) error {

	if swag.IsZero(m.AccessPort) { // not required
		return nil
	}

	for i := 0; i < len(m.AccessPort); i++ {
		if swag.IsZero(m.AccessPort[i]) { // not required
			continue
		}

		if m.AccessPort[i] != nil {
			if err := m.AccessPort[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tapi-equipment:physical-span" + "." + "access-port" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpan) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	for i := 0; i < len(m.Name); i++ {
		if swag.IsZero(m.Name[i]) { // not required
			continue
		}

		if m.Name[i] != nil {
			if err := m.Name[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tapi-equipment:physical-span" + "." + "name" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpan) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0 operations tapi equipment get physical span post output tapi equipment physical span abstract strand items0
// swagger:model OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0
type OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0 struct {

	// none (list)
	AdjacentStrand []*OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0AdjacentStrandItems0 `json:"adjacent-strand"`

	// A strand can end on two or more Pins (usually 2 pins, but a strand my be spliced to split a signal). This model supports only 2 ended strands.
	// A abstract strand may be spliced at both ends and hence have no direct relationship to pins or may be connected to pins at one or both ends.
	// In the essential model these Pins would be on connectors that plug in to connectors on Equipments.
	// The AbstractStrand is extended to the pins of the AccessPort which are the Pins on the Connectors of the Equipment.
	// In some cases it may not be relevant to represent the pin detail and hence the reference is to a connector alone. (list)
	ConnectorPin []*OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0ConnectorPinItems0 `json:"connector-pin"`

	// none (leaf)
	LocalID string `json:"local-id,omitempty"`

	// List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity. (list)
	Name []*OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0NameItems0 `json:"name"`

	// none (list)
	SplicedStrand []*OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0SplicedStrandItems0 `json:"spliced-strand"`

	// Relevant physical properties of the abstract strand. (list)
	StrandMediaCharacteristics []*OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0StrandMediaCharacteristicsItems0 `json:"strand-media-characteristics"`
}

// Validate validates this operations tapi equipment get physical span post output tapi equipment physical span abstract strand items0
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdjacentStrand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectorPin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSplicedStrand(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStrandMediaCharacteristics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0) validateAdjacentStrand(formats strfmt.Registry) error {

	if swag.IsZero(m.AdjacentStrand) { // not required
		return nil
	}

	for i := 0; i < len(m.AdjacentStrand); i++ {
		if swag.IsZero(m.AdjacentStrand[i]) { // not required
			continue
		}

		if m.AdjacentStrand[i] != nil {
			if err := m.AdjacentStrand[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("adjacent-strand" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0) validateConnectorPin(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectorPin) { // not required
		return nil
	}

	for i := 0; i < len(m.ConnectorPin); i++ {
		if swag.IsZero(m.ConnectorPin[i]) { // not required
			continue
		}

		if m.ConnectorPin[i] != nil {
			if err := m.ConnectorPin[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connector-pin" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	for i := 0; i < len(m.Name); i++ {
		if swag.IsZero(m.Name[i]) { // not required
			continue
		}

		if m.Name[i] != nil {
			if err := m.Name[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("name" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0) validateSplicedStrand(formats strfmt.Registry) error {

	if swag.IsZero(m.SplicedStrand) { // not required
		return nil
	}

	for i := 0; i < len(m.SplicedStrand); i++ {
		if swag.IsZero(m.SplicedStrand[i]) { // not required
			continue
		}

		if m.SplicedStrand[i] != nil {
			if err := m.SplicedStrand[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("spliced-strand" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0) validateStrandMediaCharacteristics(formats strfmt.Registry) error {

	if swag.IsZero(m.StrandMediaCharacteristics) { // not required
		return nil
	}

	for i := 0; i < len(m.StrandMediaCharacteristics); i++ {
		if swag.IsZero(m.StrandMediaCharacteristics[i]) { // not required
			continue
		}

		if m.StrandMediaCharacteristics[i] != nil {
			if err := m.StrandMediaCharacteristics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("strand-media-characteristics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0AdjacentStrandItems0 operations tapi equipment get physical span post output tapi equipment physical span abstract strand items0 adjacent strand items0
// swagger:model OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0AdjacentStrandItems0
type OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0AdjacentStrandItems0 struct {

	// none (leaf)
	AbstractStrandLocalID string `json:"abstract-strand-local-id,omitempty"`

	// none (leaf)
	PhysicalSpanUUID string `json:"physical-span-uuid,omitempty"`
}

// Validate validates this operations tapi equipment get physical span post output tapi equipment physical span abstract strand items0 adjacent strand items0
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0AdjacentStrandItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0AdjacentStrandItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0AdjacentStrandItems0) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0AdjacentStrandItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0ConnectorPinItems0 operations tapi equipment get physical span post output tapi equipment physical span abstract strand items0 connector pin items0
// swagger:model OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0ConnectorPinItems0
type OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0ConnectorPinItems0 struct {

	// Identification of the Connector in the conetxt of the referenced Equipment. (leaf)
	ConnectorIdentification string `json:"connector-identification,omitempty"`

	// Reference to the Equipment that is fitted with the Connector/Pin. (leaf)
	EquipmentUUID string `json:"equipment-uuid,omitempty"`

	// Where relevant, identification of the Pin in the contect of the connector.
	// Where the whole connector is used, then individual Pins need not be identified. (leaf)
	PinIdentification string `json:"pin-identification,omitempty"`
}

// Validate validates this operations tapi equipment get physical span post output tapi equipment physical span abstract strand items0 connector pin items0
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0ConnectorPinItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0ConnectorPinItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0ConnectorPinItems0) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0ConnectorPinItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0NameItems0 operations tapi equipment get physical span post output tapi equipment physical span abstract strand items0 name items0
// swagger:model OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0NameItems0
type OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0NameItems0 struct {

	// The value (leaf)
	Value string `json:"value,omitempty"`

	// The name of the value. The value need not have a name. (leaf)
	ValueName string `json:"value-name,omitempty"`
}

// Validate validates this operations tapi equipment get physical span post output tapi equipment physical span abstract strand items0 name items0
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0NameItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0NameItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0NameItems0) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0NameItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0SplicedStrandItems0 operations tapi equipment get physical span post output tapi equipment physical span abstract strand items0 spliced strand items0
// swagger:model OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0SplicedStrandItems0
type OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0SplicedStrandItems0 struct {

	// none (leaf)
	AbstractStrandLocalID string `json:"abstract-strand-local-id,omitempty"`

	// none (leaf)
	PhysicalSpanUUID string `json:"physical-span-uuid,omitempty"`
}

// Validate validates this operations tapi equipment get physical span post output tapi equipment physical span abstract strand items0 spliced strand items0
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0SplicedStrandItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0SplicedStrandItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0SplicedStrandItems0) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0SplicedStrandItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0StrandMediaCharacteristicsItems0 operations tapi equipment get physical span post output tapi equipment physical span abstract strand items0 strand media characteristics items0
// swagger:model OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0StrandMediaCharacteristicsItems0
type OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0StrandMediaCharacteristicsItems0 struct {

	// The value (leaf)
	Value string `json:"value,omitempty"`

	// The name of the value. The value need not have a name. (leaf)
	ValueName string `json:"value-name,omitempty"`
}

// Validate validates this operations tapi equipment get physical span post output tapi equipment physical span abstract strand items0 strand media characteristics items0
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0StrandMediaCharacteristicsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0StrandMediaCharacteristicsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0StrandMediaCharacteristicsItems0) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAbstractStrandItems0StrandMediaCharacteristicsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAccessPortItems0 operations tapi equipment get physical span post output tapi equipment physical span access port items0
// swagger:model OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAccessPortItems0
type OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAccessPortItems0 struct {

	// none (leaf)
	AccessPortUUID string `json:"access-port-uuid,omitempty"`

	// none (leaf)
	DeviceUUID string `json:"device-uuid,omitempty"`
}

// Validate validates this operations tapi equipment get physical span post output tapi equipment physical span access port items0
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAccessPortItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAccessPortItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAccessPortItems0) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanAccessPortItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanNameItems0 operations tapi equipment get physical span post output tapi equipment physical span name items0
// swagger:model OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanNameItems0
type OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanNameItems0 struct {

	// The value (leaf)
	Value string `json:"value,omitempty"`

	// The name of the value. The value need not have a name. (leaf)
	ValueName string `json:"value-name,omitempty"`
}

// Validate validates this operations tapi equipment get physical span post output tapi equipment physical span name items0
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanNameItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanNameItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanNameItems0) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetPhysicalSpanPostOutputTapiEquipmentPhysicalSpanNameItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
