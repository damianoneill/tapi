// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// OperationsTapiEquipmentGetDevicePostOutput operations tapi equipment get device post output
// swagger:model operations_tapi-equipment_get-device-post-output
type OperationsTapiEquipmentGetDevicePostOutput struct {

	// tapi equipment device
	TapiEquipmentDevice *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDevice `json:"tapi-equipment:device,omitempty"`
}

// Validate validates this operations tapi equipment get device post output
func (m *OperationsTapiEquipmentGetDevicePostOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTapiEquipmentDevice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutput) validateTapiEquipmentDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.TapiEquipmentDevice) { // not required
		return nil
	}

	if m.TapiEquipmentDevice != nil {
		if err := m.TapiEquipmentDevice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tapi-equipment:device")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutput) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDevice none (non-presence)
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDevice
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDevice struct {

	// none (list)
	AccessPort []*OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0 `json:"access-port"`

	// none (list)
	Equipment []*OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0 `json:"equipment"`

	// List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity. (list)
	Name []*OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceNameItems0 `json:"name"`

	// UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity.
	// UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters.
	// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
	// Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6 (leaf)
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDevice) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEquipment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDevice) validateAccessPort(formats strfmt.Registry) error {

	if swag.IsZero(m.AccessPort) { // not required
		return nil
	}

	for i := 0; i < len(m.AccessPort); i++ {
		if swag.IsZero(m.AccessPort[i]) { // not required
			continue
		}

		if m.AccessPort[i] != nil {
			if err := m.AccessPort[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tapi-equipment:device" + "." + "access-port" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDevice) validateEquipment(formats strfmt.Registry) error {

	if swag.IsZero(m.Equipment) { // not required
		return nil
	}

	for i := 0; i < len(m.Equipment); i++ {
		if swag.IsZero(m.Equipment[i]) { // not required
			continue
		}

		if m.Equipment[i] != nil {
			if err := m.Equipment[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tapi-equipment:device" + "." + "equipment" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDevice) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	for i := 0; i < len(m.Name); i++ {
		if swag.IsZero(m.Name[i]) { // not required
			continue
		}

		if m.Name[i] != nil {
			if err := m.Name[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tapi-equipment:device" + "." + "name" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDevice) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0 operations tapi equipment get device post output tapi equipment device access port items0
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0 struct {

	// The list of Pins that support the AccessPort. (list)
	ConnectorPin []*OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0ConnectorPinItems0 `json:"connector-pin"`

	// List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity. (list)
	Name []*OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0NameItems0 `json:"name"`

	// UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity.
	// UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters.
	// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
	// Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6 (leaf)
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device access port items0
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectorPin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0) validateConnectorPin(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectorPin) { // not required
		return nil
	}

	for i := 0; i < len(m.ConnectorPin); i++ {
		if swag.IsZero(m.ConnectorPin[i]) { // not required
			continue
		}

		if m.ConnectorPin[i] != nil {
			if err := m.ConnectorPin[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connector-pin" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	for i := 0; i < len(m.Name); i++ {
		if swag.IsZero(m.Name[i]) { // not required
			continue
		}

		if m.Name[i] != nil {
			if err := m.Name[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("name" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0ConnectorPinItems0 operations tapi equipment get device post output tapi equipment device access port items0 connector pin items0
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0ConnectorPinItems0
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0ConnectorPinItems0 struct {

	// Identification of the Connector in the conetxt of the referenced Equipment. (leaf)
	ConnectorIdentification string `json:"connector-identification,omitempty"`

	// Reference to the Equipment that is fitted with the Connector/Pin. (leaf)
	EquipmentUUID string `json:"equipment-uuid,omitempty"`

	// Where relevant, identification of the Pin in the contect of the connector.
	// Where the whole connector is used, then individual Pins need not be identified. (leaf)
	PinIdentification string `json:"pin-identification,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device access port items0 connector pin items0
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0ConnectorPinItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0ConnectorPinItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0ConnectorPinItems0) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0ConnectorPinItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0NameItems0 operations tapi equipment get device post output tapi equipment device access port items0 name items0
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0NameItems0
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0NameItems0 struct {

	// The value (leaf)
	Value string `json:"value,omitempty"`

	// The name of the value. The value need not have a name. (leaf)
	ValueName string `json:"value-name,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device access port items0 name items0
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0NameItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0NameItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0NameItems0) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceAccessPortItems0NameItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0 operations tapi equipment get device post output tapi equipment device equipment items0
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0 struct {

	// actual equipment
	ActualEquipment *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipment `json:"actual-equipment,omitempty"`

	// This attribute provides the identifier for the form of equipments regarded as having particular shared characteristics. (leaf)
	Category string `json:"category,omitempty"`

	// References the Holder in an Equipment that is available to take other Equipments.
	// For example:
	// - Slot in a sub-rack
	// - Slot in a Field Replaceable Unit that can take a small form-factor pluggable. (list)
	ContainedHolder []*OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0 `json:"contained-holder"`

	// none (leaf)
	EquipmentLocation string `json:"equipment-location,omitempty"`

	// none (list)
	ExpectedEquipment []*OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0 `json:"expected-equipment"`

	// none (leaf)
	GeographicalLocation string `json:"geographical-location,omitempty"`

	// none (leaf)
	IsExpectedActualMismatch bool `json:"is-expected-actual-mismatch,omitempty"`

	// List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity. (list)
	Name []*OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0NameItems0 `json:"name"`

	// UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity.
	// UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters.
	// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
	// Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6 (leaf)
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device equipment items0
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActualEquipment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainedHolder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedEquipment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0) validateActualEquipment(formats strfmt.Registry) error {

	if swag.IsZero(m.ActualEquipment) { // not required
		return nil
	}

	if m.ActualEquipment != nil {
		if err := m.ActualEquipment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actual-equipment")
			}
			return err
		}
	}

	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0) validateContainedHolder(formats strfmt.Registry) error {

	if swag.IsZero(m.ContainedHolder) { // not required
		return nil
	}

	for i := 0; i < len(m.ContainedHolder); i++ {
		if swag.IsZero(m.ContainedHolder[i]) { // not required
			continue
		}

		if m.ContainedHolder[i] != nil {
			if err := m.ContainedHolder[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contained-holder" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0) validateExpectedEquipment(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpectedEquipment) { // not required
		return nil
	}

	for i := 0; i < len(m.ExpectedEquipment); i++ {
		if swag.IsZero(m.ExpectedEquipment[i]) { // not required
			continue
		}

		if m.ExpectedEquipment[i] != nil {
			if err := m.ExpectedEquipment[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("expected-equipment" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	for i := 0; i < len(m.Name); i++ {
		if swag.IsZero(m.Name[i]) { // not required
			continue
		}

		if m.Name[i] != nil {
			if err := m.Name[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("name" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipment none (non-presence)
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipment
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipment struct {

	// none (list)
	ActualNonFieldReplaceableModule []*OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0 `json:"actual-non-field-replaceable-module"`

	// common actual properties
	CommonActualProperties *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentCommonActualProperties `json:"common-actual-properties,omitempty"`

	// common equipment properties
	CommonEquipmentProperties *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentCommonEquipmentProperties `json:"common-equipment-properties,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device equipment items0 actual equipment
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActualNonFieldReplaceableModule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommonActualProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommonEquipmentProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipment) validateActualNonFieldReplaceableModule(formats strfmt.Registry) error {

	if swag.IsZero(m.ActualNonFieldReplaceableModule) { // not required
		return nil
	}

	for i := 0; i < len(m.ActualNonFieldReplaceableModule); i++ {
		if swag.IsZero(m.ActualNonFieldReplaceableModule[i]) { // not required
			continue
		}

		if m.ActualNonFieldReplaceableModule[i] != nil {
			if err := m.ActualNonFieldReplaceableModule[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actual-equipment" + "." + "actual-non-field-replaceable-module" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipment) validateCommonActualProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.CommonActualProperties) { // not required
		return nil
	}

	if m.CommonActualProperties != nil {
		if err := m.CommonActualProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actual-equipment" + "." + "common-actual-properties")
			}
			return err
		}
	}

	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipment) validateCommonEquipmentProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.CommonEquipmentProperties) { // not required
		return nil
	}

	if m.CommonEquipmentProperties != nil {
		if err := m.CommonEquipmentProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actual-equipment" + "." + "common-equipment-properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipment) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0 operations tapi equipment get device post output tapi equipment device equipment items0 actual equipment actual non field replaceable module items0
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0 struct {

	// common actual properties
	CommonActualProperties *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0CommonActualProperties `json:"common-actual-properties,omitempty"`

	// common equipment properties
	CommonEquipmentProperties *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0CommonEquipmentProperties `json:"common-equipment-properties,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device equipment items0 actual equipment actual non field replaceable module items0
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommonActualProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommonEquipmentProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0) validateCommonActualProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.CommonActualProperties) { // not required
		return nil
	}

	if m.CommonActualProperties != nil {
		if err := m.CommonActualProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common-actual-properties")
			}
			return err
		}
	}

	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0) validateCommonEquipmentProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.CommonEquipmentProperties) { // not required
		return nil
	}

	if m.CommonEquipmentProperties != nil {
		if err := m.CommonEquipmentProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common-equipment-properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0CommonActualProperties none (non-presence)
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0CommonActualProperties
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0CommonActualProperties struct {

	// This attribute represents the asset identifier of this instance from the manufacturer's perspective. (leaf)
	AssetInstanceIdentifier string `json:"asset-instance-identifier,omitempty"`

	// The state of the power being supplied to the equipment.
	// Note that this attribute summarizes the power state.
	// Full details on the actual power system would be provided from a number of PC instances representing the relevant parts of the Power function (e.g. different voltage supplies). (leaf)
	IsPowered bool `json:"is-powered,omitempty"`

	// This attribute represents the date on which this instance is manufactured. (leaf)
	ManufactureDate string `json:"manufacture-date,omitempty"`

	// This attribute represents the serial number of this instance. (leaf)
	SerialNumber string `json:"serial-number,omitempty"`

	// The measured temperature of the Equipment. (leaf)
	Temperature float64 `json:"temperature,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device equipment items0 actual equipment actual non field replaceable module items0 common actual properties
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0CommonActualProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0CommonActualProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0CommonActualProperties) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0CommonActualProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0CommonEquipmentProperties none (non-presence)
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0CommonEquipmentProperties
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0CommonEquipmentProperties struct {

	// Represents the invariant properties of the equipment asset allocated by the operator that define and characterize the type. (leaf)
	AssetTypeIdentifier string `json:"asset-type-identifier,omitempty"`

	// Text describing the type of Equipment. (leaf)
	EquipmentTypeDescription string `json:"equipment-type-description,omitempty"`

	// This attribute identifies the part type of the equipment. (leaf)
	EquipmentTypeIdentifier string `json:"equipment-type-identifier,omitempty"`

	// This attribute identifies the type of the equipment. (leaf)
	EquipmentTypeName string `json:"equipment-type-name,omitempty"`

	// This attribute identifies the version of the equipment. (leaf)
	EquipmentTypeVersion string `json:"equipment-type-version,omitempty"`

	// The formal unique identifier of the manufacturer. (leaf)
	ManufacturerIdentifier string `json:"manufacturer-identifier,omitempty"`

	// The formal name of the manufacturer of the Equipment. (leaf)
	ManufacturerName string `json:"manufacturer-name,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device equipment items0 actual equipment actual non field replaceable module items0 common equipment properties
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0CommonEquipmentProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0CommonEquipmentProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0CommonEquipmentProperties) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentActualNonFieldReplaceableModuleItems0CommonEquipmentProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentCommonActualProperties none (non-presence)
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentCommonActualProperties
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentCommonActualProperties struct {

	// This attribute represents the asset identifier of this instance from the manufacturer's perspective. (leaf)
	AssetInstanceIdentifier string `json:"asset-instance-identifier,omitempty"`

	// The state of the power being supplied to the equipment.
	// Note that this attribute summarizes the power state.
	// Full details on the actual power system would be provided from a number of PC instances representing the relevant parts of the Power function (e.g. different voltage supplies). (leaf)
	IsPowered bool `json:"is-powered,omitempty"`

	// This attribute represents the date on which this instance is manufactured. (leaf)
	ManufactureDate string `json:"manufacture-date,omitempty"`

	// This attribute represents the serial number of this instance. (leaf)
	SerialNumber string `json:"serial-number,omitempty"`

	// The measured temperature of the Equipment. (leaf)
	Temperature float64 `json:"temperature,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device equipment items0 actual equipment common actual properties
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentCommonActualProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentCommonActualProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentCommonActualProperties) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentCommonActualProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentCommonEquipmentProperties none (non-presence)
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentCommonEquipmentProperties
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentCommonEquipmentProperties struct {

	// Represents the invariant properties of the equipment asset allocated by the operator that define and characterize the type. (leaf)
	AssetTypeIdentifier string `json:"asset-type-identifier,omitempty"`

	// Text describing the type of Equipment. (leaf)
	EquipmentTypeDescription string `json:"equipment-type-description,omitempty"`

	// This attribute identifies the part type of the equipment. (leaf)
	EquipmentTypeIdentifier string `json:"equipment-type-identifier,omitempty"`

	// This attribute identifies the type of the equipment. (leaf)
	EquipmentTypeName string `json:"equipment-type-name,omitempty"`

	// This attribute identifies the version of the equipment. (leaf)
	EquipmentTypeVersion string `json:"equipment-type-version,omitempty"`

	// The formal unique identifier of the manufacturer. (leaf)
	ManufacturerIdentifier string `json:"manufacturer-identifier,omitempty"`

	// The formal name of the manufacturer of the Equipment. (leaf)
	ManufacturerName string `json:"manufacturer-name,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device equipment items0 actual equipment common equipment properties
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentCommonEquipmentProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentCommonEquipmentProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentCommonEquipmentProperties) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ActualEquipmentCommonEquipmentProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0 operations tapi equipment get device post output tapi equipment device equipment items0 contained holder items0
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0 struct {

	// actual holder
	ActualHolder *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ActualHolder `json:"actual-holder,omitempty"`

	// expected holder
	ExpectedHolder *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ExpectedHolder `json:"expected-holder,omitempty"`

	// List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity. (list)
	Name []*OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0NameItems0 `json:"name"`

	// occupying fru
	OccupyingFru *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0OccupyingFru `json:"occupying-fru,omitempty"`

	// UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity.
	// UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters.
	// Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}
	// Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6 (leaf)
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device equipment items0 contained holder items0
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActualHolder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedHolder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOccupyingFru(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0) validateActualHolder(formats strfmt.Registry) error {

	if swag.IsZero(m.ActualHolder) { // not required
		return nil
	}

	if m.ActualHolder != nil {
		if err := m.ActualHolder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actual-holder")
			}
			return err
		}
	}

	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0) validateExpectedHolder(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpectedHolder) { // not required
		return nil
	}

	if m.ExpectedHolder != nil {
		if err := m.ExpectedHolder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expected-holder")
			}
			return err
		}
	}

	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	for i := 0; i < len(m.Name); i++ {
		if swag.IsZero(m.Name[i]) { // not required
			continue
		}

		if m.Name[i] != nil {
			if err := m.Name[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("name" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0) validateOccupyingFru(formats strfmt.Registry) error {

	if swag.IsZero(m.OccupyingFru) { // not required
		return nil
	}

	if m.OccupyingFru != nil {
		if err := m.OccupyingFru.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("occupying-fru")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ActualHolder none (non-presence)
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ActualHolder
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ActualHolder struct {

	// common holder properties
	CommonHolderProperties *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ActualHolderCommonHolderProperties `json:"common-holder-properties,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device equipment items0 contained holder items0 actual holder
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ActualHolder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommonHolderProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ActualHolder) validateCommonHolderProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.CommonHolderProperties) { // not required
		return nil
	}

	if m.CommonHolderProperties != nil {
		if err := m.CommonHolderProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actual-holder" + "." + "common-holder-properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ActualHolder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ActualHolder) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ActualHolder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ActualHolderCommonHolderProperties none (non-presence)
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ActualHolderCommonHolderProperties
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ActualHolderCommonHolderProperties struct {

	// The type of holder. (leaf)
	HolderCategory string `json:"holder-category,omitempty"`

	// The relative position of the holder in the context of its containing equipment along with the position of that containing Equipment (and further recursion). (leaf)
	HolderLocation string `json:"holder-location,omitempty"`

	// This attribute indicates whether the holder has guides that constrain the position of the equipment in the holder or not. (leaf)
	IsGUIDED bool `json:"is-guided,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device equipment items0 contained holder items0 actual holder common holder properties
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ActualHolderCommonHolderProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ActualHolderCommonHolderProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ActualHolderCommonHolderProperties) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ActualHolderCommonHolderProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ExpectedHolder none (non-presence)
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ExpectedHolder
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ExpectedHolder struct {

	// common holder properties
	CommonHolderProperties *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ExpectedHolderCommonHolderProperties `json:"common-holder-properties,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device equipment items0 contained holder items0 expected holder
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ExpectedHolder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommonHolderProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ExpectedHolder) validateCommonHolderProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.CommonHolderProperties) { // not required
		return nil
	}

	if m.CommonHolderProperties != nil {
		if err := m.CommonHolderProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expected-holder" + "." + "common-holder-properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ExpectedHolder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ExpectedHolder) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ExpectedHolder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ExpectedHolderCommonHolderProperties none (non-presence)
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ExpectedHolderCommonHolderProperties
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ExpectedHolderCommonHolderProperties struct {

	// The type of holder. (leaf)
	HolderCategory string `json:"holder-category,omitempty"`

	// The relative position of the holder in the context of its containing equipment along with the position of that containing Equipment (and further recursion). (leaf)
	HolderLocation string `json:"holder-location,omitempty"`

	// This attribute indicates whether the holder has guides that constrain the position of the equipment in the holder or not. (leaf)
	IsGUIDED bool `json:"is-guided,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device equipment items0 contained holder items0 expected holder common holder properties
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ExpectedHolderCommonHolderProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ExpectedHolderCommonHolderProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ExpectedHolderCommonHolderProperties) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0ExpectedHolderCommonHolderProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0NameItems0 operations tapi equipment get device post output tapi equipment device equipment items0 contained holder items0 name items0
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0NameItems0
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0NameItems0 struct {

	// The value (leaf)
	Value string `json:"value,omitempty"`

	// The name of the value. The value need not have a name. (leaf)
	ValueName string `json:"value-name,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device equipment items0 contained holder items0 name items0
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0NameItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0NameItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0NameItems0) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0NameItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0OccupyingFru The FRU that is occupying the holder.
// A holder may be unoccupied.
// An FRU may occupy more hat one holder (using or blocking are intentionally not distinguished here). (non-presence)
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0OccupyingFru
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0OccupyingFru struct {

	// none (leaf)
	DeviceUUID string `json:"device-uuid,omitempty"`

	// none (leaf)
	EquipmentUUID string `json:"equipment-uuid,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device equipment items0 contained holder items0 occupying fru
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0OccupyingFru) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0OccupyingFru) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0OccupyingFru) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ContainedHolderItems0OccupyingFru
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0 operations tapi equipment get device post output tapi equipment device equipment items0 expected equipment items0
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0 struct {

	// common equipment properties
	CommonEquipmentProperties *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0CommonEquipmentProperties `json:"common-equipment-properties,omitempty"`

	// none (list)
	ExpectedHolder []*OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedHolderItems0 `json:"expected-holder"`

	// none (list)
	ExpectedNonFieldReplaceableModule []*OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedNonFieldReplaceableModuleItems0 `json:"expected-non-field-replaceable-module"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device equipment items0 expected equipment items0
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommonEquipmentProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedHolder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpectedNonFieldReplaceableModule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0) validateCommonEquipmentProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.CommonEquipmentProperties) { // not required
		return nil
	}

	if m.CommonEquipmentProperties != nil {
		if err := m.CommonEquipmentProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common-equipment-properties")
			}
			return err
		}
	}

	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0) validateExpectedHolder(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpectedHolder) { // not required
		return nil
	}

	for i := 0; i < len(m.ExpectedHolder); i++ {
		if swag.IsZero(m.ExpectedHolder[i]) { // not required
			continue
		}

		if m.ExpectedHolder[i] != nil {
			if err := m.ExpectedHolder[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("expected-holder" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0) validateExpectedNonFieldReplaceableModule(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpectedNonFieldReplaceableModule) { // not required
		return nil
	}

	for i := 0; i < len(m.ExpectedNonFieldReplaceableModule); i++ {
		if swag.IsZero(m.ExpectedNonFieldReplaceableModule[i]) { // not required
			continue
		}

		if m.ExpectedNonFieldReplaceableModule[i] != nil {
			if err := m.ExpectedNonFieldReplaceableModule[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("expected-non-field-replaceable-module" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0CommonEquipmentProperties none (non-presence)
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0CommonEquipmentProperties
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0CommonEquipmentProperties struct {

	// Represents the invariant properties of the equipment asset allocated by the operator that define and characterize the type. (leaf)
	AssetTypeIdentifier string `json:"asset-type-identifier,omitempty"`

	// Text describing the type of Equipment. (leaf)
	EquipmentTypeDescription string `json:"equipment-type-description,omitempty"`

	// This attribute identifies the part type of the equipment. (leaf)
	EquipmentTypeIdentifier string `json:"equipment-type-identifier,omitempty"`

	// This attribute identifies the type of the equipment. (leaf)
	EquipmentTypeName string `json:"equipment-type-name,omitempty"`

	// This attribute identifies the version of the equipment. (leaf)
	EquipmentTypeVersion string `json:"equipment-type-version,omitempty"`

	// The formal unique identifier of the manufacturer. (leaf)
	ManufacturerIdentifier string `json:"manufacturer-identifier,omitempty"`

	// The formal name of the manufacturer of the Equipment. (leaf)
	ManufacturerName string `json:"manufacturer-name,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device equipment items0 expected equipment items0 common equipment properties
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0CommonEquipmentProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0CommonEquipmentProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0CommonEquipmentProperties) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0CommonEquipmentProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedHolderItems0 operations tapi equipment get device post output tapi equipment device equipment items0 expected equipment items0 expected holder items0
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedHolderItems0
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedHolderItems0 struct {

	// common holder properties
	CommonHolderProperties *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedHolderItems0CommonHolderProperties `json:"common-holder-properties,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device equipment items0 expected equipment items0 expected holder items0
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedHolderItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommonHolderProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedHolderItems0) validateCommonHolderProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.CommonHolderProperties) { // not required
		return nil
	}

	if m.CommonHolderProperties != nil {
		if err := m.CommonHolderProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common-holder-properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedHolderItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedHolderItems0) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedHolderItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedHolderItems0CommonHolderProperties none (non-presence)
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedHolderItems0CommonHolderProperties
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedHolderItems0CommonHolderProperties struct {

	// The type of holder. (leaf)
	HolderCategory string `json:"holder-category,omitempty"`

	// The relative position of the holder in the context of its containing equipment along with the position of that containing Equipment (and further recursion). (leaf)
	HolderLocation string `json:"holder-location,omitempty"`

	// This attribute indicates whether the holder has guides that constrain the position of the equipment in the holder or not. (leaf)
	IsGUIDED bool `json:"is-guided,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device equipment items0 expected equipment items0 expected holder items0 common holder properties
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedHolderItems0CommonHolderProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedHolderItems0CommonHolderProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedHolderItems0CommonHolderProperties) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedHolderItems0CommonHolderProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedNonFieldReplaceableModuleItems0 operations tapi equipment get device post output tapi equipment device equipment items0 expected equipment items0 expected non field replaceable module items0
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedNonFieldReplaceableModuleItems0
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedNonFieldReplaceableModuleItems0 struct {

	// common equipment properties
	CommonEquipmentProperties *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedNonFieldReplaceableModuleItems0CommonEquipmentProperties `json:"common-equipment-properties,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device equipment items0 expected equipment items0 expected non field replaceable module items0
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedNonFieldReplaceableModuleItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommonEquipmentProperties(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedNonFieldReplaceableModuleItems0) validateCommonEquipmentProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.CommonEquipmentProperties) { // not required
		return nil
	}

	if m.CommonEquipmentProperties != nil {
		if err := m.CommonEquipmentProperties.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("common-equipment-properties")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedNonFieldReplaceableModuleItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedNonFieldReplaceableModuleItems0) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedNonFieldReplaceableModuleItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedNonFieldReplaceableModuleItems0CommonEquipmentProperties none (non-presence)
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedNonFieldReplaceableModuleItems0CommonEquipmentProperties
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedNonFieldReplaceableModuleItems0CommonEquipmentProperties struct {

	// Represents the invariant properties of the equipment asset allocated by the operator that define and characterize the type. (leaf)
	AssetTypeIdentifier string `json:"asset-type-identifier,omitempty"`

	// Text describing the type of Equipment. (leaf)
	EquipmentTypeDescription string `json:"equipment-type-description,omitempty"`

	// This attribute identifies the part type of the equipment. (leaf)
	EquipmentTypeIdentifier string `json:"equipment-type-identifier,omitempty"`

	// This attribute identifies the type of the equipment. (leaf)
	EquipmentTypeName string `json:"equipment-type-name,omitempty"`

	// This attribute identifies the version of the equipment. (leaf)
	EquipmentTypeVersion string `json:"equipment-type-version,omitempty"`

	// The formal unique identifier of the manufacturer. (leaf)
	ManufacturerIdentifier string `json:"manufacturer-identifier,omitempty"`

	// The formal name of the manufacturer of the Equipment. (leaf)
	ManufacturerName string `json:"manufacturer-name,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device equipment items0 expected equipment items0 expected non field replaceable module items0 common equipment properties
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedNonFieldReplaceableModuleItems0CommonEquipmentProperties) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedNonFieldReplaceableModuleItems0CommonEquipmentProperties) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedNonFieldReplaceableModuleItems0CommonEquipmentProperties) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0ExpectedEquipmentItems0ExpectedNonFieldReplaceableModuleItems0CommonEquipmentProperties
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0NameItems0 operations tapi equipment get device post output tapi equipment device equipment items0 name items0
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0NameItems0
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0NameItems0 struct {

	// The value (leaf)
	Value string `json:"value,omitempty"`

	// The name of the value. The value need not have a name. (leaf)
	ValueName string `json:"value-name,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device equipment items0 name items0
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0NameItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0NameItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0NameItems0) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceEquipmentItems0NameItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceNameItems0 operations tapi equipment get device post output tapi equipment device name items0
// swagger:model OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceNameItems0
type OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceNameItems0 struct {

	// The value (leaf)
	Value string `json:"value,omitempty"`

	// The name of the value. The value need not have a name. (leaf)
	ValueName string `json:"value-name,omitempty"`
}

// Validate validates this operations tapi equipment get device post output tapi equipment device name items0
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceNameItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceNameItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceNameItems0) UnmarshalBinary(b []byte) error {
	var res OperationsTapiEquipmentGetDevicePostOutputTapiEquipmentDeviceNameItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
